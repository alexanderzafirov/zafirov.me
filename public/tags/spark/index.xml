<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spark on Zax&#39; Thoughts</title>
    <link>http://alexanderzafirov.github.io/zafirov.me/tags/spark/</link>
    <description>Recent content in Spark on Zax&#39; Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Nov 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://alexanderzafirov.github.io/zafirov.me/tags/spark/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Working with nulls in Spark UDFs</title>
      <link>http://alexanderzafirov.github.io/zafirov.me/post/sparknulls/</link>
      <pubDate>Sun, 06 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alexanderzafirov.github.io/zafirov.me/post/sparknulls/</guid>
      <description>&lt;p&gt;Today we are discussing User Defined Functions (UDF) in Spark.&lt;/p&gt;

&lt;p&gt;Sometimes the simplest things are hardest to work out. Let&amp;rsquo;s say I have a &lt;code&gt;Dataframe&lt;/code&gt; created from a parquet file which can have nullable columns that are of a certain type - in this example that is &lt;code&gt;Int&lt;/code&gt;. Since I don&amp;rsquo;t know what I&amp;rsquo;m getting (&lt;code&gt;Int&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;), I need to be able to specify that somehow or else I will get a runtime exception for wrong input type.&lt;/p&gt;

&lt;p&gt;The first solution to the problem is super ugly. I don&amp;rsquo;t like it but it works. I know that the following could be done with an implicit but I don&amp;rsquo;t like them since they are hard to trace in a bigger code base.&lt;/p&gt;

&lt;p&gt;The first step is to  set the input of the UDF to be &lt;code&gt;Any&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;def foo: (Any =&amp;gt; Int) = (a: Any) =&amp;gt; toInt(a) / 100000

val toFoo = udf(foo)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that the most important thing happens in the &lt;code&gt;toInt&lt;/code&gt; function. Since I have a val of type &lt;code&gt;Any&lt;/code&gt; that may contain a &lt;code&gt;null&lt;/code&gt;, I wrap that in an &lt;code&gt;Option&lt;/code&gt;. After that I proceed to set a default value. Since I&amp;rsquo;m specifying Int and Any as types, the compiler will try and resolve the first common type in the type tree - that is &lt;code&gt;Any&lt;/code&gt; - I need to cast the result to Int.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;def toInt(v: Any): Int = Option(v).getOrElse(0).asInstanceOf[Int]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val outDf = dfParquet
    .withColumn(&amp;quot;foo_column&amp;quot;, toFoo(&#39;a))
    .select(&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;foo_column&amp;quot;)
    .show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Phew! As I said this is not bullet-proof. The reason is that I use &lt;code&gt;Any&lt;/code&gt;, I&amp;rsquo;ve opened the door to all types so if I pass a String, let&amp;rsquo;s say, the &lt;code&gt;asInstanceOf&lt;/code&gt; will fail during execution.&lt;/p&gt;

&lt;p&gt;Luckily the solution is quite simple. Just use Java&amp;rsquo;s &lt;code&gt;Integer&lt;/code&gt; boxed primitive. It is a perfect candidate for the case. This means no conversions from &lt;code&gt;Any&lt;/code&gt;, no opening of Pandora&amp;rsquo;s Any box. If you need to make better sense of the &lt;code&gt;null&lt;/code&gt; value you can leverage on the &lt;code&gt;Option&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;def foo: (Integer =&amp;gt; Option[Integer]) = (i: Integer) =&amp;gt; Option(os3fc).map(_+1)&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>